from sage.schemes.elliptic_curves.constructor import EllipticCurve
from sage.rings.finite_rings.finite_field_constructor import FiniteField, GF
from sage.rings.integer import Integer
from sage.misc.misc_c import prod
from sage.misc.functional import sqrt, log
from sage.arith.misc import factor

from collections import defaultdict
from numeric_util import smoothness

import prtpy
from prtpy.objectives import Objective, MaximizeSmallestSum, MinimizeLargestSum, MinimizeKLargestSums, MinimizeDifference

from sage.numerical.optimize import binpacking


def combineFactors(order):
    S = [pi ** ei for pi, ei in factor(order)]
    return sorted([(prod(p), 1) for p in minrange_partition_set(S) if p != []], key=lambda x: x[0])


class MinimizeDifferenceUpperBound(Objective):
    def __init__(self, bound):
        self.bound = bound

    def value_to_minimize(self, sums, are_sums_in_ascending_order=False) -> float:
        if max(sums) > self.bound:
            return float("inf")
        return self.bound - min(sums)


def minrange_partition_set(S):
    logs = {float(log(s, 2)): s for s in S}
    baseSet = [float(log(s, 2)) for s in S]

    bins = [b for b in binpacking(baseSet, max(baseSet), k=len(baseSet), verbose=1) if b]

    p = prtpy.partition(algorithm=prtpy.partitioning.complete_greedy,
                        time_limit=20,
                        numbins=len(bins),
                        items=baseSet,
                        objective=MinimizeDifferenceUpperBound(max(baseSet)))
    return [[logs[s] for s in part] for part in p]



CURVES = {
    # Format: (Curve, Generator, expected order)
    # (EllipticCurve(GF(), []), c(), )
    # Source: https://safecurves.cr.yp.to/
    "Anomalous": (c := EllipticCurve(GF(17676318486848893030961583018778670610489016512983351739677143), [15347898055371580590890576721314318823207531963035637503096292, 7444386449934505970367865204569124728350661870959593404279615]),
                  c(1619092589586542907492569170434842128165755668543894279235270, 3436949547626524920645513316569700140535482973634182925459687),
                  Integer(17676318486848893030961583018778670610489016512983351739677143)
                  ),
    # Source: https://safecurves.cr.yp.to/
    "M-221": (c := EllipticCurve(GF(2**221 - 3), [0, 117050, 0, 1, 0]),
              c(4, 1630203008552496124843674615123983630541969261591546559209027208557),
              Integer(2**218 + 438651314700378199859927091142747)
              ),
    # Source: https://safecurves.cr.yp.to/
    "NIST P-224":(c := EllipticCurve(GF(2**224 - 2**96 + 1), [-3, 18958286285566608000408668544493926415504680968679321075787234672564]),
                  c(19277929113566293071110308034699488026831934219452440156649784352033, 19926808758034470970197974370888749184205991990603949537637343198772),
                  Integer(2**224 - 4733179336708116180759420887881155)
                  ),
    # Source: https://safecurves.cr.yp.to/
    "Curve25519": (c := EllipticCurve(GF(2 ** 255 - 19), [0, 486662, 0, 1, 0]),
                   c(9, 0x20ae19a1b8a086b4e01edd2c7748d14c923d4d7e6d7c61b229e9c5a27eced3d9),
                   Integer((2 ** 252) + 27742317777372353535851937790883648493)
                   ),
    # Source: https://safecurves.cr.yp.to/
    "BN(2,254)":(c := EllipticCurve(GF(16798108731015832284940804142231733909889187121439069848933715426072753864723 ), [0, 2]),
                 c(-1, 1),
                 Integer(16798108731015832284940804142231733909759579603404752749028378864165570215949)
                 ),
    # Source: https://safecurves.cr.yp.to/
    "brainpoolP256t1":(c := EllipticCurve(GF(76884956397045344220809746629001649093037950200943055203735601445031516197751 ), [-3, 46214326585032579593829631435610129746736367449296220983687490401182983727876]),
                       c(74138526386500101787937404544159543470173440588427591213843535686338908194292, 20625154686056605250529482107801269759951443923312408063441227608803066104254),
                       Integer(76884956397045344220809746629001649092737531784414529538755519063063536359079)
                       ),
    # Source: https://safecurves.cr.yp.to/
    "ANSSIFRP256v1":(c := EllipticCurve(GF(109454571331697278617670725030735128145969349647868738157201323556196022393859 ), [-3, 107744541122042688792155207242782455150382764043089114141096634497567301547839]),
                     c(82638672503301278923015998535776227331280144783487139112686874194432446389503, 43992510890276411535679659957604584722077886330284298232193264058442323471611),
                     Integer(109454571331697278617670725030735128146004546811402412653072203207726079563233),
                     ),
    # Source: https://safecurves.cr.yp.to/
    "NIST P-256":(c := EllipticCurve(GF(2**256 - 2**224 + 2**192 + 2**96 - 1), [-3, 41058363725152142129326129780047268409114441015993725554835256314039467401291]),
                  c(48439561293906451759052585252797914202762949526041747995844080717082404635286,
                    36134250956749795798585127919587881956611106672985015071877198253568414405109),
                  Integer(115792089210356248762697446949407573529996955224135760342422259061068512044369)
                  ),
    # Source: https://safecurves.cr.yp.to/
    "secp256k1": (c := EllipticCurve(GF(2**256 - 2**32 - 977), [0, 7]),
                  c(55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424),
                  Integer(115792089237316195423570985008687907852837564279074904382605163141518161494337)
                  ),
    # Source: Section A.2 in https://raw.githubusercontent.com/guanzhi/GM-Standards/master/GMT%E5%AF%86%E7%A0%81%E8%A1%8C%E6%A0%87/GMT%200003.2-2012%20SM2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95%E7%AC%AC2%E9%83%A8%E5%88%86%EF%BC%9A%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95.pdf
    "GM/T 0003.2-2012": (c := EllipticCurve(GF(0x8542D69E4c044f18e8b92435BF6FF7DE457283915C45517D722EDB8B08F1DFC3),
                                             [ 0x787968B4FA32C3FD2417842E73BBFEFF2F3C848B6831D7E0EC65228B3937E498,
                                               0x63E4C6D3B23B0C849CF84241484BFE48F61D59A5B16BA06E6E12D1DA27C5249A
                                              ]),
                          c(0x421DEBD61B62EAB6746434EBC3CC315E32220B3BADD50BDC4C4E6C147FEDD43D,
                            0x0680512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A2),
                          Integer(0x8542D69E4C044F18E8B92435BF6FF7DD297720630485628D5AE74EE7C32E79B7)
                          ),
    # Source: https://datatracker.ietf.org/doc/html/rfc8998
    "SM2": (c := EllipticCurve(GF(0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF),
                               [ -3,
                                 0x28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93
                                ]),
            c(0x32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7,
              0xBC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0
              ),
            Integer(0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123)
            ),
    # Source: https://datatracker.ietf.org/doc/html/rfc7091
    "GOST R 34.10": (c := EllipticCurve(GF(0x8000000000000000000000000000000000000000000000000000000000000431),
                                        [ 7,
                                          0x5FBFF498AA938CE739B8E022FBAFEF40563F6E6A3472FC2A514C0CE9DAE23B7E
                                         ]),
                     c(2, 0x8E2A8A0E65147D4BD6316030E16D19C85C97F0A9CA267122B96ABBCEA7E8FC8
                       ),
                     Integer(0x8000000000000000000000000000000150FE8A1892976154C59CFC193ACCF5B3)
                     ),
    # Source: https://safecurves.cr.yp.to/
    "NIST P-384": (c:= EllipticCurve(GF(0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff),
                                     (0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc,
                                      0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef)),
                   c(
                       0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7,
                       0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f
                   ),
                   Integer(0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973)
                   ),
    # Source: https://neuromancer.sk/std/nist/P-521
    "NIST P-521": (c:= EllipticCurve(GF(0x01ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff),
                                     (0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc,
                                      0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00)),
                   c(
                       0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66,
                       0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650
                   ), Integer(0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409)),

    # Simple Curves for testing the implementation
    "Custom20": (c := EllipticCurve(GF(1048783), [0, 7]),
                 c(942059, 733991),
                 Integer(1050337)
                 ),
    "Custom100": (c := EllipticCurve(GF(1267650600228229401496703206297), [0, 7]),
                  c(219233087875817501325327631610, 429771714730734520469230653502),
                  Integer(1267650600228230543064649624717)
                  ),
    "Custom151": (c := EllipticCurve(GF(1427247692705959881058285969449495136382749243), [0, 7]),
                  c(619055893345831519725210846682998187455506306,
                    828365733860191183888806770472604313648986262),
                  Integer(1427247692705959881058217546562822339820221757)
                  ),
    "Custom201": (c:= EllipticCurve(GF(1606938044258990275541962092341162602522202993782792835323171), [0, 7]),
                  c(1491902420203321400002324682134210242276742049261085644900516,
                    210330579192719467629584691878273469925444962520754085225344),
                  Integer(1606938044258990275541962092338751027295235039112377313612619)
                  ),
}

def pickImplCurve(NAME, alwaysReturn=True):
    _, _, o = CURVES.get(NAME)
    impl, gen = {
        "Curve25519": ((3517035344879552916111424839856442827116005289287226174356151845673600908832,
                        3719970232452709297861761723186551413741111070092681431645799092611853342157),
                       (4189240074349496965181977513464106832416760499811638850209033313065635146139,
                        3538960055627843479353453780107218175194323739643472273212513017390370501943)
                       ),
        "NIST P-256": ((8043514088977787722884130995439741291379259041856185148967013168465708057178,
                        107748575121378461039813315953967832238617696182279575193455245892602803987191
                        ),
                       (92944337062098555547220340776039927532002116784342500432010867063704755350320,
                        30920779852539801483242066768299767799142997844167944007652715647780358198815)
                       ),

        "Anomalous": ((7016984481833061787682299540866771707558700109074175418840867,
                       16384611398062706300441906741153715164631141285238744377417600
                       ),
                      (15652051342423270140637204162756010820485455220218689893150357,
                       14633139064470338496146643304112046620004297295219060070747328
                       )),
        "BN(2,254)": ((15845162667901786069406210666920486824910625650316111965179262818341925113530,
                       11899664373187239572507330554425670772811023592472385816201388571134011678882),
                      (15223629103617821685966429633650681677401739948949648596346436488410262947122,
                       10982206336809443977934989516461731349531699594760405240211305741399125741177
                       )
                      ),
        "M-221": ((116304113029365159171342316905966830649905082711778565199456696962,
                   358767160036934378790602638933969544911434951294848261884076930497),
                  (60868526189365056021377940047230528087202375889710425740322476147,
                   317822665826994002978476587801313455469145344601517342110793655614)),

        "NIST P-224": ((9689332496570606312391843351231018480110643852902238886889045092004,
                        2602363948432054676801222276171397088287503641385011100680098947020
                        ),
                       (1437502573329785429721987813888443010007584011213823042532806570713, 5391101728960742972829198332749708368467326169379962393440143523856)),

        "GOST R 34.10": ((8078292800872591706721005656641402733736595049912459819976854966775110486921,
                          57281465372426752967237808227312063872937762593114438073957255570710730313749
                          ),
                         (12884095699343404571624240415616800200215712176031841587676727413302192879887,
                          42991576276609638084695167574266101346701025018364839088466078532563683587821
                          )),

        "SM2": ((43531019851269479309619622482320619270522357313238259161713218752754930504299,   3695133538863216180384722631721414608536208931558193728482203604325473469563),
                (105675627062347562922438707775409620542857484259299534097545349817451509871491, 29351342561275848196037415806646657430996563307392733214917569671352338400054)),

        "ANSSIFRP256v1": ((56318996900293860659990100026665691635778306549641343919100267674232065400872,
                           68200797605970239992297854340822725226738573791327483575494785234902556877972),
                          (4123952795989244315272898107087460654503597171647749918805394355814108433238, 98974227888316231598933570986871613555004218906325564912615993733013128256428)),

        "brainpoolP256t1": ((59643276111192185414373792087736442677624694691961888045372431267059331892916,
                             33903585796570649378249575655580955827495996848668798535741866137513811445518)
                            , (26576027817198290280213185724125792376657985555407280951239080582538983151918, 38590071538767589471751491379129139675682169698308527971850936494040012460902)),
        "GM/T 0003.2-2012": ((37823077346240348023563850025080272098596803900987514271078094339887790518352,
                               36167373089363322282630193087435412272894810876909089373272375573206716508939),

                              (16710128110533315905725219561926432352479116282501080928036863368178164357465,
                               21737379894194757208938780527327423586078575982233705312842740004877321693631)),

        "secp256k1": ((97615198412479635240164450108365537313438589292807494414177783337622442932255,
                       23663476399437277544198790310981142582345992904103044717452069373774113481544),
                      (21760099875455620782985080094845580608535397245411641241169950622321716267362, 11615196389553654454802615785579025421710968056209241650515349100641585490467)),


        "Custom20": ((396221797, 398231852),
                     (596913, 404905)
                     ),
        "Custom100": ((402028792153763173763580446747, 239903350327435869017979182964),
                      (794009533169225888661292750364, 932028018634964618155862030610)
                      ),
        "Custom151": ((241616072719918832255630371457846656941672938,
                       132776111906602653649303202350711020115203989),
                      (1397155285953519035153372119169361828973122468,
                       541944164441205907474125417439223947145640880)),
    }.get(NAME, (None, None))
    if impl:
        EC = EllipticCurve(GF(o), impl)
        factors = combineFactors(EC.order())
        if gen:
            gen = EC(gen)
        else:
            gen = EC.gens()
    else:
        if not alwaysReturn:
            return None
        while True:
            while 0 \
                  == 4 * (A := GF(o).random_element())**3 \
                  + 27 * (B := GF(o).random_element())**2:
                pass
            EC = EllipticCurve(GF(o), A, B)
            if len(EC.gens()) != 1:
                continue
            factors = EC.order().factor()
            if smoothness(factors) < 2**40 or True:
                break
            impl = A, B
            gen = EC.gens()[0]
    return impl, factors, gen, "Weierstrass"


def getChallenge(n = 105379, a = 0, b = 7, randomQ = False):
    F = GF(n)
    E = EllipticCurve(F, [a, b])

    P = E.gens()[0]
    if randomQ:
        k = Integer(F.random_element())
    else:
        k = 95411

    return E, P, k

def getCurveChallenge(name):
    instance = CURVES.get(name, None)
    if instance:
        E, P, exp_o = instance
        assert(P.order() == exp_o)
        assert(Integer(exp_o).is_prime())
        F = GF(exp_o)

        return E, P, Integer(F.random_element())
